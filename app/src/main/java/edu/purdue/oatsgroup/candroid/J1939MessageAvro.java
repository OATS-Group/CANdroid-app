/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package edu.purdue.oatsgroup.candroid;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class J1939MessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5292163661439775322L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"J1939MessageAvro\",\"namespace\":\"edu.purdue.oatsgroup.candroid\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"double\"},{\"name\":\"pgn\",\"type\":\"int\"},{\"name\":\"data\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double timestamp;
  @Deprecated public int pgn;
  @Deprecated public java.nio.ByteBuffer data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public J1939MessageAvro() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param pgn The new value for pgn
   * @param data The new value for data
   */
  public J1939MessageAvro(java.lang.Double timestamp, java.lang.Integer pgn, java.nio.ByteBuffer data) {
    this.timestamp = timestamp;
    this.pgn = pgn;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return pgn;
    case 2: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Double)value$; break;
    case 1: pgn = (java.lang.Integer)value$; break;
    case 2: data = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Double getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Double value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'pgn' field.
   * @return The value of the 'pgn' field.
   */
  public java.lang.Integer getPgn() {
    return pgn;
  }

  /**
   * Sets the value of the 'pgn' field.
   * @param value the value to set.
   */
  public void setPgn(java.lang.Integer value) {
    this.pgn = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.nio.ByteBuffer getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.nio.ByteBuffer value) {
    this.data = value;
  }

  /**
   * Creates a new J1939MessageAvro RecordBuilder.
   * @return A new J1939MessageAvro RecordBuilder
   */
  public static edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder newBuilder() {
    return new edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder();
  }

  /**
   * Creates a new J1939MessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new J1939MessageAvro RecordBuilder
   */
  public static edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder newBuilder(edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder other) {
    return new edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder(other);
  }

  /**
   * Creates a new J1939MessageAvro RecordBuilder by copying an existing J1939MessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new J1939MessageAvro RecordBuilder
   */
  public static edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder newBuilder(edu.purdue.oatsgroup.candroid.J1939MessageAvro other) {
    return new edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder(other);
  }

  /**
   * RecordBuilder for J1939MessageAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<J1939MessageAvro>
    implements org.apache.avro.data.RecordBuilder<J1939MessageAvro> {

    private double timestamp;
    private int pgn;
    private java.nio.ByteBuffer data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pgn)) {
        this.pgn = data().deepCopy(fields()[1].schema(), other.pgn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing J1939MessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(edu.purdue.oatsgroup.candroid.J1939MessageAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pgn)) {
        this.pgn = data().deepCopy(fields()[1].schema(), other.pgn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Double getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder setTimestamp(double value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pgn' field.
      * @return The value.
      */
    public java.lang.Integer getPgn() {
      return pgn;
    }

    /**
      * Sets the value of the 'pgn' field.
      * @param value The value of 'pgn'.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder setPgn(int value) {
      validate(fields()[1], value);
      this.pgn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pgn' field has been set.
      * @return True if the 'pgn' field has been set, false otherwise.
      */
    public boolean hasPgn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pgn' field.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder clearPgn() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder setData(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public edu.purdue.oatsgroup.candroid.J1939MessageAvro.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public J1939MessageAvro build() {
      try {
        J1939MessageAvro record = new J1939MessageAvro();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Double) defaultValue(fields()[0]);
        record.pgn = fieldSetFlags()[1] ? this.pgn : (java.lang.Integer) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
